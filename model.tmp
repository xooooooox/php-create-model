<?php


namespace app\model;


use Illuminate\Database\Connection;
use Illuminate\Database\Eloquent\Builder as EloquentBuilder;
use Illuminate\Database\Query\Builder as QueryBuilder;
use \Closure;
use \Throwable;
use support\Model as BaseModel;


/**
 * %s %s
 * Class %s
 * @package app\model
 */
class %s extends BaseModel
{

    /**
     * 常量表名, 方便直接使用类名调用
     */
    const TableName = '%s';

    /**
     * 变量表名, 兼容ORM
     * @var string
     */
    protected $table = '%s';

    /**
     * 指示是否自动维护时间戳
     * @var bool
     */
    public $timestamps = false;

    /**
     * 时间戳存储格式
     * @var string
     */
    protected $dateFormat = 'U';



    /**
	 * ObjectToArray object to array
     * @param object|null|array $object
     * @return array
     */
    public static function ObjectToArray(object|null|array $object) : array {
        $bag = json_decode(json_encode($object),true);
        if (!is_array($bag)){
            return [];
        }
        return $bag;
    }
	
	/**
	 * HasEmptyArray has empty array
     * @param array ...$arrays
     * @return bool
     */
    public static function HasEmptyArray(array ...$arrays) : bool {
        foreach ($arrays as $v){
            if (is_array($v) && $v === []){
                return true;
            }
        }
        return false;
    }

    /**
	 * AddOne insert one
     * @param array $insert
     * @return int
     */
    public static function AddOne(array $insert = []) : int {
        if (static::HasEmptyArray($insert)){
            return 0;
        }
        return static::query()->insertGetId($insert);
    }
	
	/**
     * AddMany insert many rows
     * @param array ...$insert
     * @return bool
     */
    public static function AddMany(array ...$insert) : bool {
        return static::query()->insert($insert);
    }

    /**
     * Del delete zero, one or more rows
     * @param EloquentBuilder|int $where
     * @return int
     */
    public static function Del(EloquentBuilder|int $where) : int {
        if (is_int($where)){
            $result = static::query()->where('id', $where)->delete();
        }else{
            $result = $where->delete();
        }
        if (is_int($result)){
            return $result;
        }
        return 0;
    }

    /**
     * Mod update zero, one or more rows
     * @param EloquentBuilder|int $where
     * @param array $update
     * @return int
     */
    public static function Mod(EloquentBuilder|int $where, array $update = []) : int {
        if (static::HasEmptyArray($update)){
            return 0;
        }
        if (is_int($where)){
            $result = static::query()->where('id', $where)->update($update);
        }else{
            $result = $where->update($update);
        }
        if (is_int($result)){
            return $result;
        }
        return 0;
    }

    /**
     * Exists records is exists
     * @param EloquentBuilder|int $exist
     * @return bool
     */
    public static function Exists(EloquentBuilder|int $exist) : bool {
        if (is_int($exist)){
            return static::query()->where('id', $exist)->exists();
        }
        return $exist->exists();
    }
	
	/**
	 * First query first one
     * @param array|string[] $cols
     * @return array
     */
    public static function First(array $cols = ['*']) : array {
        return static::ObjectToArray(static::query()->first($cols));
    }

	/**
	 * FirstId query first one by id
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function FirstId(int $id, array $cols = ['*']) : array {
        return static::ObjectToArray(static::query()->where('id', $id)->orderBy('id')->first($cols));
    }
	
	/**
	 * FirstIdDesc query first one by id desc
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function FirstIdDesc(int $id, array $cols = ['*']) : array {
        return static::ObjectToArray(static::query()->where('id', $id)->orderByDesc('id')->first($cols));
    }
	
	/**
     * FirstUniqueEqual query first one by unique column value, does not support null value query
     * @param string $column
     * @param string|int|null $value
     * @param array|string[] $cols
     * @return array
     */
    public static function FirstUniqueEqual(string $column, string|int|null $value = null, array $cols = ['*']) : array {
        if (is_null($value)){
            return [];
        }
        return static::ObjectToArray(static::query()->where($column, '=', $value)->first($cols));
    }
	
	/**
     * Where Eloquent\Builder where
     * @param Closure|string|array $column
     * @param mixed|null $operator
     * @param mixed|null $value
     * @param string $boolean
     * @return EloquentBuilder
     */
    public static function Where(Closure|string|array $column, mixed $operator = null, mixed $value = null, string $boolean = 'and') : EloquentBuilder {
        return static::query()->where($column,$operator,$value,$boolean);
    }

    /**
     * WhereFirst Eloquent\Builder query [where] first one
     * @param EloquentBuilder|null $builder
     * @param array|string[] $cols
     * @return array
     */
    public static function WhereFirst(EloquentBuilder|null $builder, array $cols = ['*']) : array {
		if (is_null($builder)){
            return static::ObjectToArray(static::query()->first($cols));
        }
        return static::ObjectToArray($builder->first($cols));
    }

    /**
     * WhereMany Eloquent\Builder query [where] many records
     * @param EloquentBuilder|null $builder
     * @param array|string[] $cols
     * @return array
     */
    public static function WhereMany(EloquentBuilder|null $builder, array $cols = ['*']) : array {
		if (is_null($builder)){
            return static::ObjectToArray(static::query()->get($cols));
        }
        return static::ObjectToArray($builder->get($cols));
    }

    /**
     * Transaction database transaction
     * @param Closure $callback need return bool value, return true transaction auto commit, return false or throw Exception transaction auto rollback
     * @param Closure $except  handle the exception information thrown, value is getMessage()
     * @param int $attempts attempts times
     * @return bool result of transaction execute
     */
    public static function Transaction(Closure $callback, Closure $except, int $attempts = 1) : bool  {
        if ($attempts > 3){
            $attempts = 3;
        }
        if ($attempts <= 0) {
            return false;
        }
        $conn = null;
        $success = false;
        try {
            $attempts--;
            $conn = static::query()->getConnection();
            $conn->beginTransaction();
            $success = $callback($conn);
        }catch(Throwable $e){
            if (!is_null($conn)){
                $conn->rollBack();
            }
            if (is_callable($except)){
                $except($e->getMessage());
            }
        }
        if ($success === true){
            $conn->commit();
            return true;
        }
        $conn->rollBack();
        if ($attempts > 0){
            return static::Transaction($callback,$except,$attempts);
        }
        return false;
    }

    /**
	 * QueryAddOne
     * @param Connection $conn
     * @param array $insert
     * @return int
     */
    public static function QueryAddOne(Connection $conn, array $insert = []) : int {
        if (static::HasEmptyArray($insert)){
            return 0;
        }
        return $conn->table(static::TableName)->insertGetId($insert);
    }

    /**
     * QueryAddMany insert many rows
     * @param Connection $conn
     * @param mixed ...$insert
     * @return bool
     */
    public static function QueryAddMany(Connection $conn, array ...$insert) : bool {
        return $conn->table(static::TableName)->insert($insert);
    }

    /**
     * Del delete zero, one or more rows
     * @param Connection $conn
     * @param QueryBuilder|int $where
     * @return int
     */
    public static function QueryDel(Connection $conn, QueryBuilder|int $where) : int {
        if (is_int($where)){
            $result = $conn->table(static::TableName)->where('id', $where)->delete();
        }else{
            $result = $where->delete();
        }
        if (is_int($result)){
            return $result;
        }
        return 0;
    }

    /**
     * Mod update zero, one or more rows
     * @param Connection $conn
     * @param QueryBuilder|int $where
     * @param array $update
     * @return int
     */
    public static function QueryMod(Connection $conn, QueryBuilder|int $where, array $update = []) : int {
        if (static::HasEmptyArray($update)){
            return 0;
        }
        if (is_int($where)){
            $result = $conn->table(static::TableName)->where('id', $where)->update($update);
        }else{
            $result = $where->update($update);
        }
        if (is_int($result)){
            return $result;
        }
        return 0;
    }

    /**
     * QueryExists query exists
     * @param Connection $conn
     * @param QueryBuilder|int $exist
     * @return bool
     */
    public static function QueryExists(Connection $conn, QueryBuilder|int $exist) : bool {
        if (is_int($exist)){
            return $conn->table(static::TableName)->where('id', $exist)->exists();
        }
        return $exist->exists();
    }

	/**
	 * QueryFirst query first record
     * @param Connection $conn
     * @param array|string[] $cols
     * @return array
     */
    public static function QueryFirst(Connection $conn, array $cols = ['*']) : array {
        $first = $conn->table(static::TableName)->first($cols);
        return static::ObjectToArray($first);
    }

    /**
	 * QueryFirstId query first record by id
	 * @param Connection $conn
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function QueryFirstId(Connection $conn, int $id, array $cols = ['*']) : array {
        return static::ObjectToArray($conn->table(static::TableName)->where('id', $id)->orderBy('id')->first($cols));
    }
	
	/**
	 * QueryFirstIdDesc query first record by id desc
	 * @param Connection $conn
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function QueryFirstIdDesc(Connection $conn, int $id, array $cols = ['*']) : array {
        return static::ObjectToArray($conn->table(static::TableName)->where('id', $id)->orderByDesc('id')->first($cols));
    }
	
	/**
     * QueryFirstUniqueEqual query first one by unique column value, does not support null value query
     * @param Connection $conn
     * @param string $column
     * @param string|int|null $value
     * @param array|string[] $cols
     * @return array
     */
    public static function QueryFirstUniqueEqual(Connection $conn, string $column, string|int|null $value = null, array $cols = ['*']) : array {
		if (is_null($value)){
            return [];
        }
        return static::ObjectToArray($conn->table(static::TableName)->where($column, '=', $value)->first($cols));
    }

    /**
     * QueryWhere Query\Builder query where
     * @param Connection $conn
     * @param Closure|string|array $column
     * @param mixed|null $operator
     * @param mixed|null $value
     * @param string $boolean
     * @return QueryBuilder
     */
    public static function QueryWhere(Connection $conn, Closure|string|array $column, mixed $operator = null, mixed $value = null, string $boolean = 'and') : QueryBuilder {
        return $conn->table(static::TableName)->where($column, $operator, $value, $boolean);
    }
	
    /**
     * QueryWhereFirst Query\Builder query first record by where
     * @param QueryBuilder $builder
     * @param array|string[] $cols
     * @return array
     */
    public static function QueryWhereFirst(QueryBuilder $builder, array $cols = ['*']) : array {
        return static::ObjectToArray($builder->first($cols));
    }

    /**
     * QueryWhereMany Query\Builder query many rows
     * @param QueryBuilder $builder
     * @param array|string[] $cols
     * @return array
     */
    public static function QueryWhereMany(QueryBuilder $builder, array $cols = ['*']) : array {
        return static::ObjectToArray($builder->get($cols));
    }
	
	
	
	// =============================================================================================================================
	// ================================ the following methods will be abandoned in a future version ================================
	// =============================================================================================================================
	
	/**
	 * DelOne
     * @param int $id
     * @return int
     */
    public static function DelOne(int $id) : int {
        return static::Del($id);
    }

    /**
	 * ModOne
     * @param int $id
     * @param array $update
     * @return int
     */
    public static function ModOne(int $id, array $update = []) : int {
        return static::Mod($id, $update);
    }
	
	/**
	 * AscFirst {compatible with historical versions}
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function AscFirst(int $id, array $cols = ['*']) : array {
        return static::FirstId($id, $cols);
    }
	
	/**
	 * DescFirst {compatible with historical versions}
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function DescFirst(int $id, array $cols = ['*']) : array {
        return static::FirstIdDesc($id, $cols);
    }
	
	
	
	/**
	 * CntAscFirst {compatible with historical versions}
     * @param Connection $conn
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function CntAscFirst(Connection $conn, int $id, array $cols = ['*']) : array {
        return static::QueryFirstId($conn, $id, $cols);
    }

    /**
	 * CntDescFirst {compatible with historical versions}
     * @param Connection $conn
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function CntDescFirst(Connection $conn, int $id, array $cols = ['*']) : array {
        return static::QueryFirstIdDesc($conn, $id, $cols);
    }
	
	/**
	 * CntAddOne {compatible with historical versions}
     * @param Connection $conn
     * @param array $insert
     * @return int
     */
    public static function CntAddOne(Connection $conn, array $insert = []) : int {
		return static::QueryAddOne($conn, $insert);
    }

    /**
	 * CntDelOne {compatible with historical versions}
     * @param Connection $conn
     * @param int $id
     * @return int
     */
    public static function CntDelOne(Connection $conn, int $id) : int {
        return static::QueryDel($conn,$id);
    }

    /**
	 * CntModOne {compatible with historical versions}
     * @param Connection $conn
     * @param int $id
     * @param array $update
     * @return int
     */
    public static function CntModOne(Connection $conn, int $id, array $update = []) : int {
        return static::QueryMod($conn, $id, $update);
    }

    /**
	 * CntExists {compatible with historical versions}
     * @param Connection $conn
     * @param int $id
     * @return bool
     */
    public static function CntExists(Connection $conn, int $id) : bool {
		return static::QueryExists($conn, $id);
    }
	
}