<?php


namespace app\model;


use \Closure;
use \Throwable;
use Illuminate\Database\Connection;
use support\Model as BaseModel;


/**
 * %s %s
 * Class %s
 * @package app\model
 */
class %s extends BaseModel
{

    /**
     * 常量表名, 方便直接使用类名调用
     */
    const TableName = '%s';

    /**
     * 变量表名, 兼容ORM
     * @var string
     */
    protected $table = '%s';

    /**
     * 指示是否自动维护时间戳
     * @var bool
     */
    public $timestamps = false;

    /**
     * 时间戳存储格式
     * @var string
     */
    protected $dateFormat = 'U';



    /**
     * @param object|null|array $object
     * @return array
     */
    public static function ObjectToArray(object|null|array $object) : array {
        $bag = json_decode(json_encode($object),true);
        if (!is_array($bag)){
            return [];
        }
        return $bag;
    }

    /**
     * @param array $insert
     * @return int
     */
    public static function AddOne(array $insert = []) : int {
        if ($insert === []){
            return 0;
        }
        return static::query()->insertGetId($insert);
    }

    /**
     * @param int $id
     * @return int
     */
    public static function DelOne(int $id) : int {
        $rows = static::query()
            ->where('id',$id)
            ->delete();
        if (!is_int($rows)){
            return 0;
        }
        return $rows;
    }

    /**
     * @param int $id
     * @param array $update
     * @return int
     */
    public static function ModOne(int $id, array $update = []) : int {
        if ($update === []){
            return 0;
        }
        $rows = static::query()
            ->where('id',$id)
            ->update($update);
        if (!is_int($rows)){
            return 0;
        }
        return $rows;
    }

    /**
     * @param int $id
     * @return bool
     */
    public static function Exists(int $id) : bool {
        $first = static::query()
            ->where('id',$id)
            ->first(['id']);
        $bag = static::ObjectToArray($first);
        if (isset($bag['id'])){
            return true;
        }
        return false;
    }

    /**
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function AscFirst(int $id, array $cols = ['*']) : array {
        $first = static::query()
            ->where('id',$id)
            ->orderBy('id')
            ->first($cols);
        return static::ObjectToArray($first);
    }

    /**
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function DescFirst(int $id, array $cols = ['*']) : array {
        $first = static::query()
            ->where('id',$id)
            ->orderByDesc('id')
            ->first($cols);
        return static::ObjectToArray($first);
    }

    /**
     * database transaction
     * @param Closure $callback need return bool value, true auto commit, and false auto rollback
     * @param Closure $except  handle the exception information thrown, value is getMessage()
     * @param int $attempts attempts times
     * @return bool result of transaction execute
     */
    public static function Transaction(Closure $callback, Closure $except, int $attempts = 1) : bool  {
        if ($attempts > 3){
            $attempts = 3;
        }
        if ($attempts <= 0) {
            return false;
        }
        $conn = null;
        $success = false;
        try {
            $attempts--;
            $conn = static::query()->getConnection();
            $conn->beginTransaction();
            $callback($conn);
            $conn->commit();
            $success = true;
        }catch(Throwable $e){
            if (!is_null($conn)){
                $conn->rollBack();
            }
            if (is_callable($except)){
                $except($e->getMessage());
            }
        }
        if ($success === false && $attempts > 0){
            return static::Transaction($callback,$except,$attempts);
        }
        return $success;
    }

    /**
     * @param Connection $conn
     * @param array $insert
     * @return int
     */
    public static function CntAddOne(Connection $conn, array $insert = []) : int {
        if ($insert === []){
            return 0;
        }
        return $conn->table(static::TableName)->insertGetId($insert);
    }

    /**
     * @param Connection $conn
     * @param int $id
     * @return int
     */
    public static function CntDelOne(Connection $conn, int $id) : int {
        $rows = $conn->table(static::TableName)
            ->where('id',$id)
            ->delete();
        if (!is_int($rows)){
            return 0;
        }
        return $rows;
    }

    /**
     * @param Connection $conn
     * @param int $id
     * @param array $update
     * @return int
     */
    public static function CntModOne(Connection $conn, int $id, array $update = []) : int {
        if ($update === []){
            return 0;
        }
        $rows = $conn->table(static::TableName)
            ->where('id',$id)
            ->update($update);
        if (!is_int($rows)){
            return 0;
        }
        return $rows;
    }

    /**
     * @param Connection $conn
     * @param int $id
     * @return bool
     */
    public static function CntExists(Connection $conn, int $id) : bool {
        $first = $conn->table(static::TableName)
            ->where('id',$id)
            ->first(['id']);
        $bag = static::ObjectToArray($first);
        if (isset($bag['id'])){
            return true;
        }
        return false;
    }

    /**
     * @param Connection $conn
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function CntAscFirst(Connection $conn, int $id, array $cols = ['*']) : array {
        $first = $conn->table(static::TableName)
            ->where('id',$id)
            ->orderBy('id')
            ->first($cols);
        return static::ObjectToArray($first);
    }

    /**
     * @param Connection $conn
     * @param int $id
     * @param array|string[] $cols
     * @return array
     */
    public static function CntDescFirst(Connection $conn, int $id, array $cols = ['*']) : array {
        $first = $conn->table(static::TableName)
            ->where('id',$id)
            ->orderByDesc('id')
            ->first($cols);
        return static::ObjectToArray($first);
    }

    /**
     * @param array ...$arrays
     * @return bool
     */
    public static function HasEmptyArray(array ...$arrays) : bool {
        foreach ($arrays as $v){
            if (is_array($v) && $v === []){
                return true;
            }
        }
        return false;
    }

}